#!/bin/bash

# GTTM Hub - Brand Assets Repository Setup Script
# This script creates the complete directory structure and initial files
# for an AI-first brand asset management system

set -e  # Exit on error

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║   GTTM Hub Setup Script v1.0          ║${NC}"
echo -e "${BLUE}║   AI-First Brand Asset Management     ║${NC}"
echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
echo ""

# Get project directory name
read -p "Enter project directory name (default: gttm-hub): " PROJECT_DIR
PROJECT_DIR=${PROJECT_DIR:-gttm-hub}

# Check if directory exists
if [ -d "$PROJECT_DIR" ]; then
    echo -e "${YELLOW}Warning: Directory $PROJECT_DIR already exists.${NC}"
    read -p "Continue anyway? (y/n): " CONTINUE
    if [ "$CONTINUE" != "y" ]; then
        echo "Setup cancelled."
        exit 1
    fi
else
    echo -e "${GREEN}✓${NC} Creating project directory: $PROJECT_DIR"
    mkdir -p "$PROJECT_DIR"
fi

cd "$PROJECT_DIR"

# Create directory structure
echo -e "${GREEN}✓${NC} Creating directory structure..."

mkdir -p docs/branding
mkdir -p assets/source/{svg,html,prompts-used}
mkdir -p assets/generated/{midjourney,dalle,stable-diffusion}
mkdir -p assets/finalized/{brand/{logos,favicons,patterns},ui/{icons,components},social/{instagram,twitter,linkedin,youtube},game/blackjack,marketing,screenshots}
mkdir -p .ai-context
mkdir -p scripts

echo -e "${GREEN}✓${NC} Directory structure created"

# Initialize Git
echo -e "${GREEN}✓${NC} Initializing Git repository..."
git init

# Create .gitignore
cat > .gitignore << 'EOF'
# Large generated files
assets/generated/**/*.png
assets/generated/**/*.jpg
assets/finalized/**/*.png
assets/finalized/**/*.jpg
*.psd
*.ai
*.sketch
*.fig

# OS files
.DS_Store
Thumbs.db
*.swp
*.swo
*~

# Temporary files
*.tmp
.cache/
node_modules/

# IDE
.vscode/
.idea/
*.sublime-*

# Logs
*.log
EOF

echo -e "${GREEN}✓${NC} Created .gitignore"

# Create .gitattributes for Git LFS
cat > .gitattributes << 'EOF'
# Git LFS tracking
*.png filter=lfs diff=lfs merge=lfs -text
*.jpg filter=lfs diff=lfs merge=lfs -text
*.jpeg filter=lfs diff=lfs merge=lfs -text
*.gif filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text
*.ai filter=lfs diff=lfs merge=lfs -text
*.sketch filter=lfs diff=lfs merge=lfs -text
*.fig filter=lfs diff=lfs merge=lfs -text
EOF

echo -e "${GREEN}✓${NC} Created .gitattributes"

# Create main README.md
cat > README.md << 'EOF'
# GTTM Hub Brand Assets

> AI-first asset management system for Get 'Em (GTTM Hub)

**Tagline:** Train Smarter. Play Harder.

## 🎨 Brand Identity

GTTM Hub is a modular platform that fuses gaming, technical training, and creative systems thinking. Our brand reflects playful precision, systems thinking, technical elegance, and empowerment.

### Color Palette
- **Electric Indigo** `#5A4BFF` - Primary brand color
- **Aqua Mint** `#00E6A8` - Accent, success states
- **Void Black** `#0F1117` - Dark surfaces
- **Peach Glow** `#FFCAB1` - Warning states
- **Crimson Rose** `#E05263` - Error states
- **Muted Silver** `#A0AEC0` - Secondary text

## 📚 Quick Links

### Documentation
- 📖 [Brand Guidelines](docs/branding/brand-guidelines.md)
- 🎨 [Interactive Style Guide](docs/branding/style-guide.html) - Open in browser
- 🤖 [AI Prompt Library](docs/branding/prompts.md)
- 📝 [Naming Convention](docs/branding/asset-naming-convention.md)
- 🔄 [Asset Workflow](docs/branding/asset-workflow.md)
- 📊 [Asset Inventory](docs/branding/asset-inventory.md)

### For AI Collaborators
When starting a new session, reference:
1. [`.ai-context/generation-guidelines.md`](.ai-context/generation-guidelines.md) - Generation rules
2. [`.ai-context/current-project-state.md`](.ai-context/current-project-state.md) - Current status
3. [`docs/branding/asset-inventory.md`](docs/branding/asset-inventory.md) - Existing assets

## 🗂️ Directory Structure

```
gttm-hub/
├── docs/branding/           # Brand documentation
├── assets/
│   ├── source/             # AI-generated source code (SVG, HTML)
│   ├── generated/          # AI tool outputs (images)
│   └── finalized/          # Production-ready assets
├── .ai-context/            # AI instruction files
└── scripts/                # Automation scripts
```

### Asset Organization

**Source Files** (`assets/source/`)
- SVG files generated by Claude or other tools
- HTML templates and mockups
- Prompt files that generated each asset

**Generated Files** (`assets/generated/`)
- Midjourney outputs
- DALL·E outputs
- Stable Diffusion outputs
- Organized by tool

**Finalized Assets** (`assets/finalized/`)
- Production-ready, optimized files
- Organized by type: brand, ui, social, game, marketing

## 🔄 Workflow

### Standard Asset Generation Flow
1. **Request** asset from AI (Claude, Midjourney, etc.)
2. **Review** and iterate on output
3. **Save** to `assets/source/` (code) or `assets/generated/` (images)
4. **Optimize** and export to `assets/finalized/`
5. **Update** `asset-inventory.md`
6. **Commit** to Git with descriptive message

### Working with Multiple AIs
- Start sessions with context from `.ai-context/`
- Document prompts in `assets/source/prompts-used/`
- Cross-reference outputs between tools
- Update `current-project-state.md` after each session

## 🛠️ Scripts

- `./scripts/generate-inventory.sh` - Auto-update asset inventory
- `./scripts/optimize-assets.sh` - Batch optimize images
- `./scripts/export-bundle.sh` - Create release package

## 🚀 Getting Started

### Initial Setup
```bash
# Install Git LFS (if not already installed)
git lfs install

# Track LFS files
git lfs track "*.png" "*.jpg"

# Run inventory generation
./scripts/generate-inventory.sh

# Make first commit
git add .
git commit -m "Initial brand system setup"
```

### Adding New Assets
```bash
# 1. Generate with AI
# 2. Save to appropriate directory
# 3. Update inventory
./scripts/generate-inventory.sh

# 4. Commit
git add .
git commit -m "Add: [asset description]"
```

## 📦 Releases

Brand asset packages are distributed via GitHub Releases:
- [Latest Release](../../releases/latest)

Each release includes:
- Complete asset bundle (logos, icons, templates)
- Documentation PDF
- README with usage instructions

## 🤝 Contributing

### For Humans
1. Follow the [naming convention](docs/branding/asset-naming-convention.md)
2. Reference [brand guidelines](docs/branding/brand-guidelines.md)
3. Update documentation with changes
4. Submit PR with clear description

### For AI Models
1. Read `.ai-context/generation-guidelines.md` before generating
2. Check `current-project-state.md` for context
3. Follow established patterns and conventions
4. Document your outputs in `prompts-used/`

## 📄 License

© 2025 GTTM Hub. All rights reserved.

## 🆘 Support

- Issues: [GitHub Issues](../../issues)
- Documentation: [Wiki](../../wiki)
- Questions: Open a discussion in [GitHub Discussions](../../discussions)

---

**Built with AI collaboration:** Claude, Midjourney, DALL·E
EOF

echo -e "${GREEN}✓${NC} Created README.md"

# Create AI context files
cat > .ai-context/generation-guidelines.md << 'EOF'
# AI Generation Guidelines for GTTM Assets

## Brand Identity

**Project:** Get 'Em (GTTM Hub)  
**Tagline:** Train Smarter. Play Harder.  
**Personality:** Playful Precision • Systems Thinking • Technical Elegance • Empowering

## Color Palette (Always Use These)

```
Primary Brand:    #5A4BFF (Electric Indigo)
Accent:           #00E6A8 (Aqua Mint)
Surface:          #0F1117 (Void Black)
Surface Alt:      #161A22 (Deep Slate)
Border:           #2A2E37 (Charcoal)
Text:             #FFFFFF (White)
Text Muted:       #A0AEC0 (Muted Silver)
Peach:            #FFCAB1 (Peach Glow)
Crimson:          #E05263 (Crimson Rose)
```

## Design Style: Flat Minimalism

### Always Include
- Flat design (NO shadows, NO gradients except brand gradient)
- High contrast for accessibility
- Clean lines and geometric shapes
- Ample whitespace
- Clear visual hierarchy

### Never Include
- ❌ 3D effects or depth
- ❌ Texture overlays
- ❌ Drop shadows
- ❌ Gradients (except primary #5A4BFF → #00E6A8)
- ❌ Skeuomorphic elements

## Naming Convention (Critical)

**Pattern:** `gttm-[category]-[descriptor]-[variant]-[size].[ext]`

**Examples:**
- `gttm-logo-wordmark-primary.svg`
- `gttm-icon-play-primary-24.svg`
- `gttm-social-instagram-post-launch-20251014.png`
- `gttm-game-blackjack-card-spade.svg`

**Categories:** logo, icon, social, game, bg, marketing, screenshot, mockup

## When Generating SVG

```xml
<!-- Include these -->
<svg viewBox="0 0 [width] [height]" xmlns="http://www.w3.org/2000/svg">
  <title>[Asset Name]</title>
  <desc>[Purpose and usage]</desc>
  <!-- Content -->
</svg>
```

**Rules:**
- Use viewBox (not width/height)
- Include semantic title and desc
- Optimize paths (no unnecessary points)
- Use hex colors directly (no named colors)
- Keep file size minimal

## When Creating HTML/Templates

**Must include:**
- Inline styles (for portability)
- CSS custom properties for colors
- Responsive design (mobile-first)
- High contrast text
- Semantic HTML5

**Example structure:**
```html
<style>
  :root {
    --color-brand: #5A4BFF;
    --color-accent: #00E6A8;
    --color-surface: #0F1117;
  }
  /* Flat, minimal styles */
</style>
```

## Quality Checklist

Before delivering ANY asset:
- [ ] Uses exact brand colors (hex codes)
- [ ] Follows flat minimalist style
- [ ] Named according to convention
- [ ] Optimized file size
- [ ] Includes title/description
- [ ] High contrast (WCAG AA minimum)
- [ ] Works on dark backgrounds

## Tool-Specific Instructions

### For Midjourney Prompts
Always add:
- `--style raw --v 6`
- `--no shadows gradients 3d depth texture`
- Include hex codes: "using colors #5A4BFF and #00E6A8"

### For DALL·E Prompts
- Explicitly state "flat design, no shadows, minimalist"
- Specify "high contrast, simple geometric shapes"
- Include "dark background #0F1117" if relevant

### For Claude (SVG/HTML)
- Generate complete, working code
- Use semantic naming
- Include comments for complex parts
- Make easily modifiable

## Iteration Protocol

1. Generate initial version
2. Wait for feedback
3. Create new version with suffix: `-v2`, `-v3`
4. Keep previous versions in `assets/source/archive/`
5. Document changes in commit message

## Documentation Requirements

After generating each asset:
1. Save prompt used to `assets/source/prompts-used/[asset-name].txt`
2. Update `asset-inventory.md`
3. Note any variations or iterations
4. Document intended usage

## Common Mistakes to Avoid

❌ Using wrong colors  
❌ Adding shadows or 3D effects  
❌ Incorrect naming convention  
❌ Missing title/desc in SVG  
❌ Not optimizing file size  
❌ Forgetting to update inventory  

## When Uncertain

- Refer to `docs/branding/brand-guidelines.md`
- Check existing assets for patterns
- Ask for clarification before generating
- Suggest alternatives if request conflicts with brand

---

**Remember:** Consistency is key. When in doubt, simpler is better.
EOF

echo -e "${GREEN}✓${NC} Created generation-guidelines.md"

cat > .ai-context/current-project-state.md << 'EOF'
# GTTM Hub - Current Project State

**Last Updated:** [DATE]  
**Phase:** Initial Setup  
**Status:** Repository structure created, ready for asset generation

## Completed ✅

### Documentation
- ✅ Brand guidelines framework established
- ✅ Color palette defined (6 core colors)
- ✅ Naming convention documented
- ✅ AI prompt library structure created
- ✅ Asset workflow documented
- ✅ Repository structure initialized

### Setup
- ✅ Directory structure created
- ✅ Git repository initialized
- ✅ `.gitignore` configured
- ✅ Git LFS setup for large files
- ✅ Helper scripts created
- ✅ AI context files added

## In Progress ⏳

### Current Sprint
- [ ] Generate primary logo variations (0/5)
- [ ] Create favicon set (0/5 sizes)
- [ ] Design icon system (0/30 icons)
- [ ] Build social media templates (0/6 platforms)
- [ ] Create game assets (blackjack cards)

### Active Tasks
- [ ] Finalize logo design direction
- [ ] Export production-ready assets
- [ ] Create first social media posts
- [ ] Document asset locations

## Next Up 📋

### Priority 1 (This Week)
1. Generate 3-5 logo concepts
2. Create complete favicon set (16, 32, 64, 128, 180px)
3. Design 10 essential UI icons
4. Build 2-3 social media announcement templates

### Priority 2 (Next Week)
1. Complete icon library (30 total icons)
2. Create all social platform templates
3. Design blackjack card suite (52 cards + back)
4. Build marketing materials (banner, poster)

### Priority 3 (Future)
1. Video assets and animations
2. Print materials
3. Presentation templates
4. Merchandise mockups

## Decisions Needed 🤔

### Design Decisions
- [ ] Final logo variant selection (need 3-5 options first)
- [ ] Icon style: filled vs. outline (or both?)
- [ ] Social media template format (static vs. template layer)
- [ ] Card design approach (realistic vs. minimalist)

### Technical Decisions
- [ ] Use Git LFS for all images or just large files?
- [ ] Export retina (@2x) versions of all rasters?
- [ ] Create light theme variants?
- [ ] Set up automated optimization pipeline?

## Known Issues / Blockers 🚧

- None currently

## Notes & Context 📝

### Brand Direction
- Flat minimalist style (NO shadows, NO gradients except brand)
- High contrast for accessibility
- Dark-first design (primary surface: #0F1117)
- Gaming-inspired but professional

### Asset Strategy
- SVG first for scalability
- PNG fallbacks for compatibility
- Optimize all files before finalizing
- Document every generation with prompts

### AI Collaboration
- Using Claude for SVG/HTML generation
- Midjourney for atmospheric/artistic assets
- DALL·E for precise compositions
- All prompts saved in `assets/source/prompts-used/`

## Recent Activity 📅

### [Current Date]
- Initialized repository structure
- Created AI context files
- Set up documentation framework
- Ready to begin asset generation

---

**Next Session Goals:**
1. Generate initial logo concepts
2. Create favicon variations
3. Start icon library
EOF

echo -e "${GREEN}✓${NC} Created current-project-state.md"

# Create initial asset inventory
cat > docs/branding/asset-inventory.md << 'EOF'
# GTTM Asset Inventory

> Last Updated: [Run ./scripts/generate-inventory.sh to update]  
> Total Assets: 0

## 📂 Assets by Category

### Logos
*No assets yet*

### Icons
*No assets yet*

### Social Media Templates
*No assets yet*

### Game Assets
*No assets yet*

### Marketing Materials
*No assets yet*

## 📊 Generation Status

### Current Sprint
- [ ] Logo variations (0/5)
- [ ] Favicon set (0/5)
- [ ] Icon library (0/30)
- [ ] Social templates (0/6)

### Completion Stats
- **Total Assets:** 0
- **SVG Sources:** 0
- **Finalized Exports:** 0
- **Documentation:** 5 files

## 🔄 Recent Additions

### [Date] - Initial Setup
- Repository structure created
- Documentation framework established
- Ready for asset generation

---

*Run `./scripts/generate-inventory.sh` to auto-update this file*
EOF

echo -e "${GREEN}✓${NC} Created asset-inventory.md"

# Create scripts
cat > scripts/generate-inventory.sh << 'EOF'
#!/bin/bash

# Generate Asset Inventory
# Automatically scans assets directory and updates inventory

INVENTORY_FILE="docs/branding/asset-inventory.md"
DATE=$(date +%Y-%m-%d)

# Count assets
SVG_COUNT=$(find assets/source/svg -name "*.svg" 2>/dev/null | wc -l)
HTML_COUNT=$(find assets/source/html -name "*.html" 2>/dev/null | wc -l)
FINALIZED_COUNT=$(find assets/finalized -type f 2>/dev/null | wc -l)
TOTAL=$((SVG_COUNT + HTML_COUNT + FINALIZED_COUNT))

# Generate header
cat > "$INVENTORY_FILE" << HEADER
# GTTM Asset Inventory

> Last Updated: $DATE
> Total Assets: $TOTAL

## 📂 Assets by Category

HEADER

# List SVG sources
echo "### SVG Source Files ($SVG_COUNT)" >> "$INVENTORY_FILE"
if [ $SVG_COUNT -gt 0 ]; then
    find assets/source/svg -name "*.svg" | sort | sed 's/^/- /' >> "$INVENTORY_FILE"
else
    echo "*No SVG files yet*" >> "$INVENTORY_FILE"
fi
echo "" >> "$INVENTORY_FILE"

# List HTML templates
echo "### HTML Templates ($HTML_COUNT)" >> "$INVENTORY_FILE"
if [ $HTML_COUNT -gt 0 ]; then
    find assets/source/html -name "*.html" | sort | sed 's/^/- /' >> "$INVENTORY_FILE"
else
    echo "*No HTML templates yet*" >> "$INVENTORY_FILE"
fi
echo "" >> "$INVENTORY_FILE"

# List finalized assets by category
echo "### Finalized Assets ($FINALIZED_COUNT)" >> "$INVENTORY_FILE"
echo "" >> "$INVENTORY_FILE"

for category in brand ui social game marketing screenshots; do
    COUNT=$(find "assets/finalized/$category" -type f 2>/dev/null | wc -l)
    echo "#### $(echo $category | sed 's/.*/\u&/') ($COUNT)" >> "$INVENTORY_FILE"
    if [ $COUNT -gt 0 ]; then
        find "assets/finalized/$category" -type f | sort | sed 's/^/- /' >> "$INVENTORY_FILE"
    else
        echo "*No assets yet*" >> "$INVENTORY_FILE"
    fi
    echo "" >> "$INVENTORY_FILE"
done

# Add footer
cat >> "$INVENTORY_FILE" << FOOTER

## 📊 Summary

- **SVG Sources:** $SVG_COUNT
- **HTML Templates:** $HTML_COUNT
- **Finalized Assets:** $FINALIZED_COUNT
- **Total:** $TOTAL

---

*Auto-generated on $DATE by generate-inventory.sh*
FOOTER

echo "✓ Asset inventory updated: $TOTAL total assets"
EOF

chmod +x scripts/generate-inventory.sh
echo -e "${GREEN}✓${NC} Created generate-inventory.sh"

cat > scripts/optimize-assets.sh << 'EOF'
#!/bin/bash

# Optimize Assets
# Batch optimize PNG and JPG files

echo "Optimizing assets..."

# Check if optimization tools are installed
if ! command -v optipng &> /dev/null && ! command -v pngquant &> /dev/null; then
    echo "Warning: No PNG optimization tools found."
    echo "Install with: brew install optipng pngquant"
fi

if ! command -v jpegoptim &> /dev/null; then
    echo "Warning: jpegoptim not found."
    echo "Install with: brew install jpegoptim"
fi

# Optimize PNGs
if command -v pngquant &> /dev/null; then
    echo "Optimizing PNGs with pngquant..."
    find assets/finalized -name "*.png" -exec pngquant --quality=80-95 --ext .png --force {} \;
fi

# Optimize JPGs
if command -v jpegoptim &> /dev/null; then
    echo "Optimizing JPGs with jpegoptim..."
    find assets/finalized -name "*.jpg" -exec jpegoptim --max=85 {} \;
fi

echo "✓ Optimization complete"
EOF

chmod +x scripts/optimize-assets.sh
echo -e "${GREEN}✓${NC} Created optimize-assets.sh"

cat > scripts/export-bundle.sh << 'EOF'
#!/bin/bash

# Export Bundle
# Create a release package of all finalized assets

VERSION=${1:-"v1.0"}
DATE=$(date +%Y%m%d)
BUNDLE_NAME="gttm-brand-assets-$VERSION-$DATE"

echo "Creating asset bundle: $BUNDLE_NAME"

# Create temporary directory
mkdir -p "dist/$BUNDLE_NAME"

# Copy finalized assets
cp -R assets/finalized/* "dist/$BUNDLE_NAME/"

# Copy documentation
mkdir -p "dist/$BUNDLE_NAME/documentation"
cp docs/branding/*.md "dist/$BUNDLE_NAME/documentation/"
cp docs/branding/*.html "dist/$BUNDLE_NAME/documentation/" 2>/dev/null || true

# Create README for bundle
cat > "dist/$BUNDLE_NAME/README.md" << README
# GTTM Brand Assets - $VERSION

Release Date: $(date +%Y-%m-%d)

## Contents

This package contains production-ready brand assets for GTTM Hub:

- \`brand/\` - Logos, favicons, patterns
- \`ui/\` - Icons and UI components
- \`social/\` - Social media templates
- \`game/\` - Game-specific assets
- \`marketing/\` - Marketing materials
- \`documentation/\` - Brand guidelines and usage docs

## Usage

Refer to the documentation folder for:
- Brand guidelines
- Naming conventions
- Usage examples
- Color specifications

## Questions?

Visit: https://github.com/[your-username]/gttm-hub

© 2025 GTTM Hub. All rights reserved.
README

# Create zip archive
cd dist
zip -r "$BUNDLE_NAME.zip" "$BUNDLE_NAME"
cd ..

echo "✓ Bundle created: dist/$BUNDLE_NAME.zip"
echo ""
echo "To create a GitHub release:"
echo "gh release create $VERSION dist/$BUNDLE_NAME.zip --title 'Brand Assets $VERSION' --notes 'Release notes here'"
EOF

chmod +x scripts/export-bundle.sh
echo -e "${GREEN}✓${NC} Created export-bundle.sh"

# Create placeholder documentation files
touch docs/branding/brand-guidelines.md
touch docs/branding/prompts.md
touch docs/branding/asset-naming-convention.md
touch docs/branding/asset-workflow.md

echo -e "${GREEN}✓${NC} Created placeholder documentation files"

# Run initial inventory generation
./scripts/generate-inventory.sh

# Initial git commit
git add .
git commit -m "Initial setup: GTTM Hub brand asset repository

- Created directory structure for AI-first workflow
- Added documentation framework
- Configured Git with LFS support
- Added helper scripts for asset management
- Set up AI context files for collaboration

Ready for asset generation."

echo ""
echo -e "${GREEN}═══════════════════════════════════════${NC}"
echo -e "${GREEN}✓ Setup Complete!${NC}"
echo -e "${GREEN}═══════════════════════════════════════${NC}"
echo ""
echo -e "${BLUE}Project Location:${NC} $(pwd)"
echo ""
echo -e "${BLUE}Next Steps:${NC}"
echo "1. Copy documentation from your conversation to docs/branding/"
echo "2. Save SVG/HTML artifacts to assets/source/"
echo "3. Run: ./scripts/generate-inventory.sh"
echo "4. Push to GitHub: git remote add origin [your-repo-url]"
echo "5. Push: git push -u origin main"
echo ""
echo -e "${BLUE}Quick Commands:${NC}"
echo "  Update inventory:    ./scripts/generate-inventory.sh"
echo "  Optimize assets:     ./scripts/optimize-assets.sh"
echo "  Create release:      ./scripts/export-bundle.sh v1.0"
echo ""
echo -e "${BLUE}AI Context Files:${NC}"
echo "  Generation rules:    .ai-context/generation-guidelines.md"
echo "  Current state:       .ai-context/current-project-state.md"
echo ""
echo -e "${YELLOW}Don't forget to:${NC}"
echo "  - Install Git LFS: git lfs install"
echo "  - Add remote: git remote add origin [url]"
echo "  - Update .ai-context/current-project-state.md with today's date"
echo ""
echo -e "${GREEN}Happy creating! 🎨${NC}"

chmod +x scripts/setup-repo.sh
echo -e "${GREEN}✓${NC} Created setup script"

echo ""
echo -e "${GREEN}════════════════════════════════════════${NC}"
echo -e "${GREEN}  Setup Script Generation Complete!${NC}"
echo -e "${GREEN}════════════════════════════════════════${NC}"
echo ""
